#!/bin/bash

# WebSocket Test Script for Real-time Updates

echo "üîå WebSocket Real-time Update Test"
echo "================================="

echo ""
echo "This script will help you test if WebSocket real-time updates are working."
echo ""

echo "üìã Prerequisites:"
echo "1. Backend server running: cd backend && go run main.go"
echo "2. Frontend running: cd frontend && npm run dev"
echo "3. Open browser developer tools (F12)"
echo "4. Two browser windows/tabs with different users logged in"

echo ""
echo "üß™ Test Steps:"
echo ""

echo "Step 1: Check WebSocket Connection"
echo "---------------------------------"
echo "In browser console, look for:"
echo "‚úÖ 'WebSocket connected to room: [room_id]'"
echo "‚úÖ 'WebSocket connection skipped' should NOT appear"
echo "‚ùå If you see connection errors, check:"
echo "   - Backend server is running on port 8080"
echo "   - User is properly authenticated"
echo "   - Room ID is valid"

echo ""
echo "Step 2: Test Message Real-time Updates"
echo "-------------------------------------"
echo "User A: Send a message 'Hello from User A'"
echo "User B: Should see the message appear immediately WITHOUT refreshing"
echo "‚úÖ Expected: Message appears in real-time"
echo "‚ùå If not working: Message only appears after page refresh"

echo ""
echo "Step 3: Test Reaction Real-time Updates"
echo "--------------------------------------"
echo "User A: Add üëç reaction to User B's message"
echo "User B: Should see the üëç reaction appear immediately WITHOUT refreshing"
echo "‚úÖ Expected: Reaction appears in real-time"
echo "‚ùå If not working: Reaction only appears after page refresh"

echo ""
echo "Step 4: Test Reaction Switching Real-time"
echo "----------------------------------------"
echo "User A: Switch from üëç to ‚ù§Ô∏è on the same message"
echo "User B: Should see üëç disappear and ‚ù§Ô∏è appear immediately"
echo "‚úÖ Expected: Smooth transition in real-time"
echo "‚ùå If not working: Changes only visible after refresh"

echo ""
echo "Step 5: Check Browser Console"
echo "----------------------------"
echo "In each browser tab, check console for:"
echo ""
echo "üîç WebSocket Messages (should appear):"
echo "‚Ä¢ 'WebSocket message received: {type: \"reaction\", ...}'"
echo "‚Ä¢ 'WebSocket message received: {type: \"message\", ...}'"
echo "‚Ä¢ 'Adding new message: {...}'"
echo ""
echo "‚ùå Error Messages (should NOT appear):"
echo "‚Ä¢ 'WebSocket is not connected'"
echo "‚Ä¢ 'Error handling reaction:'"
echo "‚Ä¢ 'Connection error occurred'"

echo ""
echo "Step 6: Network Tab Check"
echo "------------------------"
echo "1. Open Network tab in DevTools"
echo "2. Filter by 'WS' (WebSocket)"
echo "3. You should see:"
echo "   ‚úÖ WebSocket connection established"
echo "   ‚úÖ Messages flowing in both directions"
echo "   ‚ùå No '101 Switching Protocols' errors"

echo ""
echo "üêõ Debugging Commands:"
echo "====================="
echo ""
echo "If WebSocket is not working, run these in browser console:"
echo ""
echo "1. Check connection status:"
echo "   console.log('WS Connected:', isConnected)"
echo ""
echo "2. Check current user and room:"
echo "   console.log('User:', user, 'Room:', selectedRoom)"
echo ""
echo "3. Force reconnection:"
echo "   // This would depend on your specific implementation"
echo ""
echo "4. Check if messages are being processed:"
echo "   console.log('Messages:', messages, 'Chat History:', chatHistory)"

echo ""
echo "üîß Backend Debugging:"
echo "===================="
echo "If frontend looks correct, check backend logs for:"
echo ""
echo "‚úÖ Should see:"
echo "‚Ä¢ 'WebSocket connected to room: [room_id]'"
echo "‚Ä¢ 'Received message with existing ID: [id] - skipping database save'"
echo "‚Ä¢ 'Sending reaction:' (from frontend)"
echo ""
echo "‚ùå Should NOT see:"
echo "‚Ä¢ Connection refused errors"
echo "‚Ä¢ Database connection errors"
echo "‚Ä¢ Hub not initialized errors"

echo ""
echo "üí° Common Issues & Solutions:"
echo "=========================="
echo ""
echo "Issue 1: 'WebSocket connection skipped'"
echo "Solution: Check if user is logged in and room ID is valid"
echo ""
echo "Issue 2: 'Connection error occurred'"
echo "Solution: Restart backend server, check port 8080 is free"
echo ""
echo "Issue 3: 'Error handling reaction'"
echo "Solution: Check API endpoints are responding (test with curl)"
echo ""
echo "Issue 4: Messages/reactions work but no real-time"
echo "Solution: Check WebSocket broadcasting in backend controller"

echo ""
echo "Ready to test real-time functionality! üöÄ"
echo ""
echo "üí¨ If issues persist:"
echo "1. Check both frontend and backend console logs"
echo "2. Verify database connectivity"  
echo "3. Test API endpoints directly with curl/Postman"
echo "4. Ensure CORS is configured correctly"
